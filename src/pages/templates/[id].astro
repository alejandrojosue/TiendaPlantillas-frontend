---
import Layout from "../../layouts/Layout.astro";
import TemplateRepository from "../../repositories/TemplateRepository";
import ReaderMarkdown from "../../components/ReaderMarkdown";
import Carousel from "../../components/template/Carousel";
import LinkButton from "../../components/LinkButton";
import CategoryTag from "../../components/CategoryTag";
import { IconArrowLeft, IconTablerCoin, IconTablerEye, IconCirclePlus } from "../../components/icons/Icons";
export const prerender = false;
const { id } = Astro.params;
if (!id) return;

const templateRepository = new TemplateRepository();

const template = await templateRepository.getById(id);
if (!template) Astro.response.status = 404;
---

<Layout title={template?.title || ""}>
   <div class="p-3 overflow-hidden">
      <h1 class="text-5xl my-2 text-gray-700 dark:text-white">{template?.title}</h1>
      <Carousel images={template?.images as string[]} client:load />
      <ReaderMarkdown description={template?.description} />
      <div class="grid lg:grid-cols-2 lg:gap-16">
         <div
            class="bg-blue-500 text-white dark:bg-gray-800 dark:text-gray-100 p-8 text-3xl font-semibold my-3 rounded-md flex items-center justify-center"
         >
            <IconTablerCoin width="35" height="35" />
            Precio: ${template?.unitPrice}
         </div>
         <div
            class="bg-gray-100 dark:bg-gray-400 text-lg relative p-8 flex items-center justify-center text-gray-800 font-semibold my-3 rounded-md"
         >
            <span
               class="text-blue-500 dark:text-slate-800 p-3 text-xs absolute top-1 left-1"
               >Autor</span
            >
            <a
               href=`/user/${template?.freelancer.username}`
               class="capitalize transition-all hover:text-2xl"
               >{template?.freelancer.username}</a
            >
            <h1 class="mx-2">&#183;</h1>{template?.freelancer.email}
         </div>
      </div>
      <div class="flex flex-wrap justify-center my-3 gap-4 mb-10">
         <span class="font-semibold p-2 rounded-s-full bg-blue-500 text-white dark:bg-gray-400 dark:text-gray-800">Tags:</span>
         {
            template?.categories.map(({ categoryName }) => (
               <CategoryTag size="large" categoryName={categoryName} />
            ))
         }
      </div>
      <div class="flex flex-wrap">
         <LinkButton link="/templates" size="large">
            <IconArrowLeft width="40" height="40" />
            Regresar
         </LinkButton>
         <LinkButton link={template?.url ?? ""} size="large" target="_blank">
            <IconTablerEye width="44" height="44" />
            Vista previa
         </LinkButton>
         <LinkButton link="#" size="large">
            <div
               id="add-cart"
               data-id={template?.id}
               data-name={template?.title}
               data-price={template?.unitPrice}
               data-img={template?.images[0]}
               class="flex gap-x-2 items-center"
            >
               <IconCirclePlus width="40" height="40" />
               Agregar al carrito
            </div>
         </LinkButton>
      </div>
   </div>
</Layout>
<script>
   const btnAddToCart = document.getElementById("add-cart") as HTMLDivElement;
   btnAddToCart.addEventListener("click", () => {
      const template = {
         id: btnAddToCart.attributes.getNamedItem("data-id")?.value,
         name: btnAddToCart.attributes.getNamedItem("data-name")?.value,
         price: btnAddToCart.attributes.getNamedItem("data-price")?.value,
         img: btnAddToCart.attributes.getNamedItem("data-img")?.value,
      };
      const templates =
         JSON.parse(localStorage.getItem("cart") as string) || []; // almacena un Array

      if (
         Array.isArray(templates) &&
         templates.findIndex(({ id }) => id === template.id) === -1
      )
         localStorage.setItem(
            "cart",
            JSON.stringify(templates.concat(template)),
         );
   });
</script>
